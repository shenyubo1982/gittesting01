## 08-02 包
## python提供了一种把模块组织到一起的方法，即创建一个包。
## 包就是一个含有__init__.py文件的文件夹，文件夹内可以组织子模块或子包
##
## pool/                #顶级包
## ├── __init__.py
## ├── futures          #子包
## │   ├── __init__.py
## │   ├── process.py
## │   └── thread.py
## └── versions.py      #子模块

## 强调
# 1.在python3中，即使包下面没有__init__.py文件，
# import包仍然不会报错，
# 2.创建包的目的不是为了运行，而是被导入使用。
# 包知识模块的一种形式而已，包的本质就是一种模块

##二、包的使用
# 2.1 导入包与__init__.py
# 包属于模块的一种，因而包以及包内的模块均是用来被导入使用的。
# 而绝非被直接执行，首次导入包（import pool）步骤：
## 1.执行包下的__init__.py文件
## 2.产生一个新的名称空间用于存放__init__.py执行过程中产生的名字
## 3.在当前执行文件所在的名称空间中得到一个名字pool，
## 该名字指向__init__.py的名称空间，例如pool.xxx和pool.yyy中
## 的xxx，yyy都是来自于pool下的__init__.py,也就是说，
## 导入包时并不会导入包下所有的子模块与子包

## sample 01
import pool

pool.versions.check()
threadpool = pool.futures.thread.ThreadPoolExecutor(3)
threadpool.submit()

##会抛出异常，问题是pool下没有名字versions，需要在pool下的__init__.py
##中到导入模块versions


##1.关于包相关的导入语句也分为import和from ... import ...
# 两种，但是无论哪种，无论在什么位置，在导入时都必须遵循一个原则：
# 凡是在导入时带点的，点的左边都必须是一个包，否则非法。可以带有一连串的点，
# 如import 顶级包.子包.子模块,但都必须遵循这个原则。但对于导入后，
# 在使用时就没有这种限制了，点的左边可以是包,模块，函数，
# 类(它们都可以用点的方式调用自己的属性)。

##2、包A和包B下有同名模块也不会冲突，如A.a与B.a来自俩个命名空间

##3、import导入文件时，产生名称空间中的名字来源于文件，
# import 包，产生的名称空间的名字同样来源于文件，
# 即包下的__init__.py，导入包本质就是在导入该文件





